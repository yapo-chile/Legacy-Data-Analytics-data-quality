email_sender = DataWatch <email>
# keep the comma at the end even if there's only one recipient
email_recipients = email,

# an alert is triggered if actual data is > predicted*tolerance or < predicted/tolerance
default_tolerance = float
# if not differently specified, we suppose a weekly seasonality
default_seasonality = int
# if not differently specified, we train our models with a 28 days history
default_history_length = int
# all unstable_kpis kpi/variation combinations will NOT trigger alerts
unstable_kpis = kpis_list
# connection string to use to read the kpi historic data
history_datasource = postgresql://username:password@host:port/database_name

# each query/kpi needs to be placed in the appropriate datasource section.
# each datasource must set its connection_string
# each query/kpi needs to be a [[subsection]] have an unique identifier across ALL datasources
# multiline queries must be surrounded by triple quotes: ''' SELECT * FROM ... '''
# % chars as in LIKE '%foo%' need to be escaped: LIKE '%%foo%%'
# in each query, %(day)s will be expanded as the date for with the kpi is being calculated

[dwh]
connection_string = postgresql://username:password@host:port/database_name

[[new_adspripro]]
query = '''
select 
	approval_date::varchar as dt_day,
	platform as variation,
	sum(new_ads_pri) + sum(new_ads_pro) as value
from
	(--new_ads
	select  approval_date::date, 
			case when ad.platform_id_fk = 1 then 'Desktop'
				 when ad.platform_id_fk = 2 then 'Msite'
				 when ad.platform_id_fk = 7 then 'iOS'
	 		 	 when ad.platform_id_fk = 8 then 'Android'
			end platform,
			case when spd.seller_id_fk is null then 'NaPri' else 'NaPro' end type_new_ads,
			sum(case when spd.seller_id_fk is null then 1 else 0 end) new_ads_pri,
			sum(case when spd.seller_id_fk is not null then 1 else 0 end) new_ads_pro
	from 
			ods.ad ad
	left join 
			ods.seller_pro_details spd
	on 
			ad.seller_id_fk::int = spd.seller_id_fk::int and ad.category_id_fk::int = spd.category_id_fk::int
	where 
			approval_date::date between now()::date - 1 and now()::date - 1
			and ad.platform_id_fk in (1,2,7,8)
	group by 1,2,3
	union all
	select 	bsd.list_time::date, 
			case when ad.platform_id_fk = 1 then 'Desktop'
				 when ad.platform_id_fk = 2 then 'Msite'
				 when ad.platform_id_fk = 7 then 'iOS'
				 when ad.platform_id_fk = 8 then 'Android'
			end platform,
			'NaPro' type_new_ads,
			0 new_ads_pro, 
			count(distinct ad.ad_id_pk) new_ads_pro
	from 
			stg.big_sellers_detail bsd
	left join 
			ods.ad ad
	on 
			bsd.ad_id_nk::int = ad.ad_id_nk
	where 
			bsd.list_time::date between now()::date - 1 and now()::date - 1 
			and ad.platform_id_fk in (1,2,7,8)
	group by 1,2,3
	) new_ads
where
	approval_date is not null
group by 1,2
order by 1,2
'''